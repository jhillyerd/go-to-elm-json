module Strings exposing (Strings, decoder, encode)

import Json.Decode as D
import Json.Decode.Pipeline as P
import Json.Encode as E


-- Generated by https://github.com/jhillyerd/go-to-elm-json


type alias Strings =
    { exportedBareString : String
    , exportedTaggedString : String
    , exportedOptionalString : Maybe String
    , anotherOptionalString : Maybe String
    }


decoder : D.Decoder Strings
decoder =
    D.succeed Strings
        |> P.required "ExportedBareString" D.string
        |> P.required "exported-tagged-string" D.string
        |> P.optional "exported-optional-string" (D.nullable D.string) Nothing
        |> P.optional "AnotherOptionalString" (D.nullable D.string) Nothing


encode : Strings -> E.Value
encode r =
    E.object
        [ ("ExportedBareString", E.string r.exportedBareString)
        , ("exported-tagged-string", E.string r.exportedTaggedString)
        , ("exported-optional-string", maybe E.string r.exportedOptionalString)
        , ("AnotherOptionalString", maybe E.string r.anotherOptionalString)
        ]


maybe : (a -> E.Value) -> Maybe a -> E.Value
maybe encoder =
    Maybe.map encoder >> Maybe.withDefault E.null
