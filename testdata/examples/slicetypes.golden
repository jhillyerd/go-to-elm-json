module SliceTypes exposing (SliceTypes, decoder, encode)

import Json.Decode as D
import Json.Decode.Pipeline as P
import Json.Encode as E



-- Generated by https://github.com/jhillyerd/go-to-elm-json


type alias SliceTypes =
    { bools : Maybe (List Bool)
    , floats : Maybe (List Float)
    , strings : Maybe (List String)
    }


decoder : D.Decoder SliceTypes
decoder =
    D.succeed SliceTypes
        |> P.required "Bools" (D.nullable (D.list D.bool))
        |> P.required "Floats" (D.nullable (D.list D.float))
        |> P.required "Strings" (D.nullable (D.list D.string))


encode : SliceTypes -> E.Value
encode r =
    E.object
        [ ( "Bools", maybe (E.list E.bool) r.bools )
        , ( "Floats", maybe (E.list E.float) r.floats )
        , ( "Strings", maybe (E.list E.string) r.strings )
        ]


maybe : (a -> E.Value) -> Maybe a -> E.Value
maybe encoder =
    Maybe.map encoder >> Maybe.withDefault E.null
