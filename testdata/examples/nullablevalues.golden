module NullableValues exposing (NullableValues, decoder, encode)

import Json.Decode as D
import Json.Decode.Pipeline as P
import Json.Encode as E



-- Generated by https://github.com/jhillyerd/go-to-elm-json


type alias NullableValues =
    { nullString : Maybe String
    , optNullString : Maybe String
    , nullInt : Maybe Int
    , nullStruct : Maybe InnerStruct
    }


type alias InnerStruct =
    { value : String
    }


decoder : D.Decoder NullableValues
decoder =
    D.succeed NullableValues
        |> P.required "NullString" (D.nullable D.string)
        |> P.optional "OptNullString" (D.nullable D.string) Nothing
        |> P.required "NullInt" (D.nullable D.int)
        |> P.required "NullStruct" (D.nullable innerStructDecoder)


encode : NullableValues -> E.Value
encode r =
    E.object
        [ ( "NullString", maybe E.string r.nullString )
        , ( "OptNullString", maybe E.string r.optNullString )
        , ( "NullInt", maybe E.int r.nullInt )
        , ( "NullStruct", maybe encodeInnerStruct r.nullStruct )
        ]


innerStructDecoder : D.Decoder InnerStruct
innerStructDecoder =
    D.succeed InnerStruct
        |> P.required "Value" D.string


encodeInnerStruct : InnerStruct -> E.Value
encodeInnerStruct r =
    E.object
        [ ( "Value", E.string r.value )
        ]


maybe : (a -> E.Value) -> Maybe a -> E.Value
maybe encoder =
    Maybe.map encoder >> Maybe.withDefault E.null
