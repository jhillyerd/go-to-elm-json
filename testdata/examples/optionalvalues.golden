module OptionalValues exposing (OptionalValues, decoder, encode)

import Json.Decode as D
import Json.Decode.Pipeline as P
import Json.Encode as E


-- Generated by https://github.com/jhillyerd/go-to-elm-json


type alias OptionalValues =
    { optString : Maybe String
    , optInt : Maybe Int
    , optBool : Maybe Bool
    }


decoder : D.Decoder OptionalValues
decoder =
    D.succeed OptionalValues
        |> P.optional "opt-string" (D.nullable D.string) Nothing
        |> P.optional "OptInt" (D.nullable D.int) Nothing
        |> P.optional "OptBool" (D.nullable D.bool) Nothing


encode : OptionalValues -> E.Value
encode r =
    E.object
        [ ("opt-string", maybe E.string r.optString)
        , ("OptInt", maybe E.int r.optInt)
        , ("OptBool", maybe E.bool r.optBool)
        ]


maybe : (a -> E.Value) -> Maybe a -> E.Value
maybe encoder =
    Maybe.map encoder >> Maybe.withDefault E.null
